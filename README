# 📚 Smart Librarian – LLM-Powered Book Assistant

Smart Librarian is a Streamlit application that combines **ChromaDB** and the **OpenAI API** to recommend books, summarize content, and provide an interactive library experience. It features both **User Mode** and **Admin Mode**, with input moderation, success/error messages, and enhancements like TTS and image generation.  

Two ways to run this app:  

- **Locally with Streamlit**, for a lightweight development setup.  
- **In Docker**, for reproducible deployments without polluting your system environment.  

---

## ⚡ Streamlit
Streamlit powers the user interface with a fast, interactive, browser-based experience.  
- Minimal code turns functions into interactive components.  
- Built-in session state for mode switching (user/admin).  
- Real-time feedback for recommendations, moderation, and admin actions.  

---

## 🗄️ ChromaDB
ChromaDB stores book embeddings and performs semantic search.  
- On startup, the app initializes a Chroma client & collection.  
- If `AUTO_RESET=1` and it’s the first session, the index is rebuilt from `data/book_summaries.json`.  
- Vector search (top-K) over summaries returns relevant matches.  

---

## 🧭 How it Works (Flow)

**Startup**  
- Loads config from `.env` / environment (`lib/config.py`).  
- Ensures Chroma client & collection (`lib/vector.py`).  
- Optionally rebuilds the index from `book_summaries.json`.  

**User Prompt**  
- Moderation check: if unsafe and `MODERATION_BLOCK=1`, rejects with “Your message has unsafe language.”  
- Otherwise, searches vector DB for top-K summaries.  

**Selection**  
- If `USE_LLM=1`: LLM picks the best recommendation and explains why.  
- Else: returns the top-1 vector match.  

**Enhancements**  
- 🎨 Image generation for conceptual book covers.  
- 🔊 TTS output for summaries with voice choices.  

**Admin Mode (`SMARTLIB_ADMIN=1`)**  
- Hidden debug panels show index count and last search hits.  

---

## ✨ Features
- 🧑‍💻 **Dual Mode** → User & Admin interfaces.  
- 🚫 **Input Moderation** → Blocks unsafe queries.  
- ✅ **Success Feedback** → Confirms when actions succeed.  
- 🎨 **Image & TTS Enhancements** → Extra flavor for recommendations.  
- 🐳 **Dockerized** → Run anywhere with a single command.  

---

## 📦 Environment Variables (`.env`)

Your `.env` only requires:  

```env
# OpenAI API Key
OPENAI_API_KEY=your_openai_api_key_here

# Admin Mode (0 = disabled, 1 = enabled)
SMARTLIB_ADMIN=0
```

---

## 🚀 Quick Start (Local)

```bash
git clone https://github.com/Alex-Baba/Assignment-Smart-Librarian-LLM.git
cd Assignment-Smart-Librarian-LLM
cp .env.example .env                # or create your own
pip install -r requirements.txt
streamlit run app.py
```

Now open: [http://localhost:8501](http://localhost:8501)  

---

## 🐳 Docker

Build and run with Docker:  

```bash
docker build -t smart-librarian .
docker run -p 8501:8501 --env-file .env smart-librarian
```

Then visit: [http://localhost:8501](http://localhost:8501)  

---

## 🧪 Example Usage

- “Cozy fantasy with found family and tea-shop vibes.”  
- “Space opera with political intrigue and ecology themes.”  
- “Whodunnit with sarcastic humor and small-town setting.”  

⚠️ If you see **“Your message has unsafe language”**, the recommendation is blocked until your next clean prompt.  

---

## 🧠 Data Format

The `book_summaries.json` supports two formats:  

**1. Object Map**
```json
{
  "Dune": "Summary text...",
  "The Hobbit": "Summary text..."
}
```

**2. List of Objects**
```json
[
  {"Title": "Dune", "Summary": "Summary text..."},
  {"Title": "The Hobbit", "Summary": "Summary text..."}
]
```

Each entry is stored with `{title, summary}` metadata.  

---

## 🖼️ Screenshots

- **User Mode**  
  ![User Mode](./images/user_mode.png)

- **Admin Mode**  
  ![Admin Mode](./images/admin_mode.png)

- **Bad Word Detected**  
  ![Bad Word](./images/bad_word.png)

- **Success Message**  
  ![Success](./images/success.png)

---

## 📌 Notes
- Ensure `.env` is properly set with a valid `OPENAI_API_KEY`.  
- ChromaDB will automatically manage embeddings locally.  
- Admin features unlock when `SMARTLIB_ADMIN=1`.  
